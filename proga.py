import tkinter as tk
from tkinter import ttk, messagebox, filedialog, font
import json
import os
from datetime import datetime
import threading
import time
import random


class ModernNotesApp:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("AldiyarZ Pro")
        self.root.geometry("1400x900")
        self.root.resizable(False, False)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.center_window()
        
        # –¢–µ–º—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.themes = {
            'dark': {
                'name': '–¢–µ–º–Ω–∞—è',
                'bg_primary': '#1a1a1a',
                'bg_secondary': '#2d2d2d',
                'bg_card': '#3a3a3a',
                'accent': '#6366f1',
                'accent_hover': '#4f46e5',
                'text_primary': '#ffffff',
                'text_secondary': '#a1a1aa',
                'border': '#4a4a4a',
                'success': '#22c55e',
                'warning': '#f59e0b',
                'danger': '#ef4444'
            },
            'light': {
                'name': '–°–≤–µ—Ç–ª–∞—è',
                'bg_primary': '#ffffff',
                'bg_secondary': '#f8f9fa',
                'bg_card': '#ffffff',
                'accent': '#0066cc',
                'accent_hover': '#0052a3',
                'text_primary': '#1a1a1a',
                'text_secondary': '#6c757d',
                'border': '#dee2e6',
                'success': '#198754',
                'warning': '#fd7e14',
                'danger': '#dc3545'
            },
            'purple': {
                'name': '–§–∏–æ–ª–µ—Ç–æ–≤–∞—è',
                'bg_primary': '#1a0d26',
                'bg_secondary': '#2d1b3d',
                'bg_card': '#3d2954',
                'accent': '#8b5cf6',
                'accent_hover': '#7c3aed',
                'text_primary': '#ffffff',
                'text_secondary': '#c4b5fd',
                'border': '#6d28d9',
                'success': '#10b981',
                'warning': '#f59e0b',
                'danger': '#ef4444'
            },
            'ocean': {
                'name': '–û–∫–µ–∞–Ω',
                'bg_primary': '#0f172a',
                'bg_secondary': '#1e293b',
                'bg_card': '#334155',
                'accent': '#0ea5e9',
                'accent_hover': '#0284c7',
                'text_primary': '#f1f5f9',
                'text_secondary': '#94a3b8',
                'border': '#475569',
                'success': '#22c55e',
                'warning': '#f59e0b',
                'danger': '#ef4444'
            },
            'forest': {
                'name': '–õ–µ—Å',
                'bg_primary': '#0d1b0d',
                'bg_secondary': '#1a2e1a',
                'bg_card': '#2d4a2d',
                'accent': '#22c55e',
                'accent_hover': '#16a34a',
                'text_primary': '#f0fdf4',
                'text_secondary': '#86efac',
                'border': '#166534',
                'success': '#22c55e',
                'warning': '#f59e0b',
                'danger': '#ef4444'
            }
        }
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings = self.load_settings()
        self.current_theme = self.settings.get('theme', 'dark')
        self.colors = self.themes[self.current_theme]
        
        self.notes = []
        self.current_note = None
        self.search_var = tk.StringVar()
        self.search_var.trace('w', self.search_notes)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_notes': 0,
            'total_words': 0,
            'session_start': datetime.now()
        }
        
        self.setup_styles()
        self.create_ui()
        self.load_notes()
        self.start_autosave()
        self.start_motivational_quotes()
        
        # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.setup_hotkeys()
        
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.root.update_idletasks()
        width = 1400
        height = 900
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')
        
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏
        style.configure('Modern.TFrame', background=self.colors['bg_primary'])
        style.configure('Card.TFrame', background=self.colors['bg_card'], relief='flat')
        style.configure('Sidebar.TFrame', background=self.colors['bg_secondary'])
        
    def create_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.root.configure(bg=self.colors['bg_primary'])
        
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.root, style='Modern.TFrame')
        main_frame.pack(fill='both', expand=True, padx=2, pady=2)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π
        self.create_sidebar(main_frame)
        self.create_main_area(main_frame)
        
    def create_sidebar(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏"""
        sidebar = tk.Frame(parent, bg=self.colors['bg_secondary'], width=380)
        sidebar.pack(side='left', fill='y', padx=(0, 2))
        sidebar.pack_propagate(False)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–∏—Å–∫
        header_frame = self.create_header(sidebar)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.create_stats_panel(sidebar)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        self.create_action_buttons(sidebar)
        
        # –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
        self.create_notes_list(sidebar)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–∏–∑—É
        self.create_settings_panel(sidebar)
        
    def create_header(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        header_frame = tk.Frame(parent, bg=self.colors['bg_secondary'], height=100)
        header_frame.pack(fill='x', pady=(20, 10), padx=20)
        header_frame.pack_propagate(False)
        
        # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(header_frame, text="‚ú® ZametkaAldiyara Pro", 
                              font=('Segoe UI', 20, 'bold'),
                              bg=self.colors['bg_secondary'],
                              fg=self.colors['accent'])
        title_label.pack(pady=(15, 10))
        
        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ —Å –∏–∫–æ–Ω–∫–æ–π
        search_frame = tk.Frame(header_frame, bg=self.colors['bg_secondary'])
        search_frame.pack(fill='x')
        
        self.search_entry = tk.Entry(search_frame, textvariable=self.search_var,
                                    font=('Segoe UI', 11),
                                    bg=self.colors['bg_card'],
                                    fg=self.colors['text_primary'],
                                    insertbackground=self.colors['text_primary'],
                                    relief='flat', bd=10)
        self.search_entry.pack(fill='x', ipady=10)
        self.search_entry.insert(0, "üîç –ù–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫—É...")
        self.search_entry.bind('<FocusIn>', self.on_search_focus_in)
        self.search_entry.bind('<FocusOut>', self.on_search_focus_out)
        
        return header_frame
        
    def create_stats_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats_frame = tk.Frame(parent, bg=self.colors['bg_card'], height=80)
        stats_frame.pack(fill='x', pady=10, padx=20)
        stats_frame.pack_propagate(False)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Å—Ç—Ä–æ–∫—É
        stats_container = tk.Frame(stats_frame, bg=self.colors['bg_card'])
        stats_container.pack(expand=True, fill='both', pady=15)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫
        notes_frame = tk.Frame(stats_container, bg=self.colors['bg_card'])
        notes_frame.pack(side='left', expand=True, fill='x')
        
        self.notes_count_label = tk.Label(notes_frame, text="0", 
                                         font=('Segoe UI', 16, 'bold'),
                                         bg=self.colors['bg_card'],
                                         fg=self.colors['accent'])
        self.notes_count_label.pack()
        
        tk.Label(notes_frame, text="–ó–∞–º–µ—Ç–æ–∫", 
                font=('Segoe UI', 9),
                bg=self.colors['bg_card'],
                fg=self.colors['text_secondary']).pack()
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
        words_frame = tk.Frame(stats_container, bg=self.colors['bg_card'])
        words_frame.pack(side='left', expand=True, fill='x')
        
        self.words_count_label = tk.Label(words_frame, text="0", 
                                         font=('Segoe UI', 16, 'bold'),
                                         bg=self.colors['bg_card'],
                                         fg=self.colors['success'])
        self.words_count_label.pack()
        
        tk.Label(words_frame, text="–°–ª–æ–≤", 
                font=('Segoe UI', 9),
                bg=self.colors['bg_card'],
                fg=self.colors['text_secondary']).pack()
        
    def create_action_buttons(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π"""
        buttons_frame = tk.Frame(parent, bg=self.colors['bg_secondary'])
        buttons_frame.pack(fill='x', pady=10, padx=20)
        
        # –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
        self.new_note_btn = tk.Button(buttons_frame, text="üñä –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞",
                                     font=('Segoe UI', 12, 'bold'),
                                     bg=self.colors['accent'],
                                     fg=self.colors['text_primary'],
                                     relief='flat', bd=0,
                                     cursor='hand2',
                                     command=self.create_new_note)
        self.new_note_btn.pack(fill='x', ipady=15)
        self.new_note_btn.bind('<Enter>', lambda e: self.button_hover(e, True))
        self.new_note_btn.bind('<Leave>', lambda e: self.button_hover(e, False))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        extra_buttons_frame = tk.Frame(buttons_frame, bg=self.colors['bg_secondary'])
        extra_buttons_frame.pack(fill='x', pady=(10, 0))
        
        extra_buttons = [
            ("üìã –®–∞–±–ª–æ–Ω", self.create_template_note),
            ("üé≤ –°–ª—É—á–∞–π–Ω–∞—è", self.open_random_note)
        ]
        
        for i, (text, command) in enumerate(extra_buttons):
            btn = tk.Button(extra_buttons_frame, text=text,
                           font=('Segoe UI', 10),
                           bg=self.colors['bg_card'],
                           fg=self.colors['text_primary'],
                           relief='flat', bd=0,
                           cursor='hand2',
                           command=command)
            btn.pack(side='left' if i == 0 else 'right', 
                    fill='x', expand=True,
                    padx=(0, 5) if i == 0 else (5, 0),
                    ipady=10)
            btn.bind('<Enter>', lambda e: self.tool_button_hover(e, True))
            btn.bind('<Leave>', lambda e: self.tool_button_hover(e, False))
            
    def create_notes_list(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫ —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä–æ–º"""
        notes_frame = tk.Frame(parent, bg=self.colors['bg_secondary'])
        notes_frame.pack(fill='both', expand=True, padx=20, pady=(10, 0))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫–∞
        list_header = tk.Frame(notes_frame, bg=self.colors['bg_secondary'], height=30)
        list_header.pack(fill='x', pady=(0, 10))
        list_header.pack_propagate(False)
        
        tk.Label(list_header, text="üìù –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏",
                font=('Segoe UI', 12, 'bold'),
                bg=self.colors['bg_secondary'],
                fg=self.colors['text_primary']).pack(side='left', pady=5)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞–Ω–≤–∞—Å–∞ —Å –¥–≤—É–º—è —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞–º–∏
        canvas_frame = tk.Frame(notes_frame, bg=self.colors['bg_secondary'])
        canvas_frame.pack(fill='both', expand=True)

        # –°–æ–∑–¥–∞—ë–º –∫–∞–Ω–≤–∞—Å
        canvas = tk.Canvas(canvas_frame, bg=self.colors['bg_secondary'], highlightthickness=0)
        
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª–±–∞—Ä
        v_scrollbar = ttk.Scrollbar(canvas_frame, orient="vertical", command=canvas.yview)
        v_scrollbar.pack(side="right", fill="y")
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
        self.scrollable_frame = tk.Frame(canvas, bg=self.colors['bg_secondary'])
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        # –°–æ–∑–¥–∞—ë–º –æ–∫–Ω–æ –Ω–∞ –∫–∞–Ω–≤–∞—Å–µ
        canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        canvas.configure(yscrollcommand=v_scrollbar.set)
        
        # –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∫–∞–Ω–≤–∞—Å
        canvas.pack(side="left", fill="both", expand=True)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è –º—ã—à–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        canvas.bind_all("<MouseWheel>", lambda event: canvas.yview_scroll(int(-1 * (event.delta / 120)), "units"))
        canvas.bind_all("<Shift-MouseWheel>", lambda event: canvas.xview_scroll(int(-1 * (event.delta / 120)), "units"))

        self.notes_canvas = canvas
        
    def create_settings_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings_frame = tk.Frame(parent, bg=self.colors['bg_card'], height=120)
        settings_frame.pack(fill='x', side='bottom', padx=20, pady=(10, 20))
        settings_frame.pack_propagate(False)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        tk.Label(settings_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                font=('Segoe UI', 11, 'bold'),
                bg=self.colors['bg_card'],
                fg=self.colors['text_primary']).pack(pady=(10, 5))
        
        # –í—ã–±–æ—Ä —Ç–µ–º—ã
        theme_frame = tk.Frame(settings_frame, bg=self.colors['bg_card'])
        theme_frame.pack(fill='x', padx=15)
        
        tk.Label(theme_frame, text="üé® –¢–µ–º–∞:",
                font=('Segoe UI', 9),
                bg=self.colors['bg_card'],
                fg=self.colors['text_secondary']).pack(side='left')
        
        self.theme_var = tk.StringVar(value=self.current_theme)
        theme_menu = ttk.Combobox(theme_frame, textvariable=self.theme_var,
                                 values=list(self.themes.keys()),
                                 state='readonly', width=12)
        theme_menu.pack(side='right')
        theme_menu.bind('<<ComboboxSelected>>', self.change_theme)
        
        # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞
        self.quote_label = tk.Label(settings_frame, text="",
                                   font=('Segoe UI', 9, 'italic'),
                                   bg=self.colors['bg_card'],
                                   fg=self.colors['text_secondary'],
                                   wraplength=300)
        self.quote_label.pack(pady=(10, 5))
        
    def create_main_area(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        main_area = tk.Frame(parent, bg=self.colors['bg_primary'])
        main_area.pack(side='right', fill='both', expand=True)
        
        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.create_toolbar(main_area)
        
        # –û–±–ª–∞—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.create_editor(main_area)
        
    def create_toolbar(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
        toolbar = tk.Frame(parent, bg=self.colors['bg_secondary'], height=70)
        toolbar.pack(fill='x', pady=(0, 2))
        toolbar.pack_propagate(False)
        
        # –õ–µ–≤–∞—è –≥—Ä—É–ø–ø–∞ –∫–Ω–æ–ø–æ–∫
        left_tools = tk.Frame(toolbar, bg=self.colors['bg_secondary'])
        left_tools.pack(side='left', padx=20, pady=10)
        
        tools_data = [
            ("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", self.save_notes),
            ("üìÅ –û—Ç–∫—Ä—ã—Ç—å", self.load_notes_file),
            ("‚ùå –£–¥–∞–ª–∏—Ç—å", self.delete_note),
            ("üìÑ –≠–∫—Å–ø–æ—Ä—Ç", self.export_note),
            ("üîÑ –û—á–∏—Å—Ç–∏—Ç—å", self.clear_editor)
        ]
        
        for text, command in tools_data:
            btn = tk.Button(left_tools,
                           text=text,
                           font=('Segoe UI', 11, 'bold'),
                           bg=self.colors['bg_card'],
                           fg=self.colors['text_primary'],
                           relief='flat',
                           bd=0,
                           cursor='hand2',
                           command=command,
                           padx=12,
                           pady=8,
                           width=10)
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—É–≥–ª—ë–Ω–Ω—ã–µ —É–≥–ª—ã –∏ —Ç–µ–Ω—å —á–µ—Ä–µ–∑ highlight
            btn.configure(highlightbackground=self.colors['border'], highlightthickness=2)
            btn.pack(side='left', padx=5)
            btn.bind('<Enter>', lambda e, b=btn: self.tool_button_hover(e, True, b))
            btn.bind('<Leave>', lambda e, b=btn: self.tool_button_hover(e, False, b))
            
        # –ü—Ä–∞–≤–∞—è –≥—Ä—É–ø–ø–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        right_info = tk.Frame(toolbar, bg=self.colors['bg_secondary'])
        right_info.pack(side='right', padx=20, pady=15)
        
        self.info_label = tk.Label(right_info, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã",
                                  font=('Segoe UI', 11),
                                  bg=self.colors['bg_secondary'],
                                  fg=self.colors['text_secondary'])
        self.info_label.pack()
        
        # –ß–∞—Å—ã
        self.clock_label = tk.Label(right_info, text="",
                                   font=('Segoe UI', 10),
                                   bg=self.colors['bg_secondary'],
                                   fg=self.colors['accent'])
        self.clock_label.pack()
        self.update_clock()
        
    def create_editor(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        editor_frame = tk.Frame(parent, bg=self.colors['bg_primary'])
        editor_frame.pack(fill='both', expand=True, padx=25, pady=(0, 25))
        
        # –ü–æ–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º
        title_frame = tk.Frame(editor_frame, bg=self.colors['bg_primary'])
        title_frame.pack(fill='x', pady=(0, 20))
        
        self.title_entry = tk.Entry(title_frame,
                                   font=('Segoe UI', 18, 'bold'),
                                   bg=self.colors['bg_card'],
                                   fg=self.colors['text_primary'],
                                   insertbackground=self.colors['text_primary'],
                                   relief='flat', bd=15)
        self.title_entry.pack(fill='x', ipady=15)
        self.title_entry.bind('<KeyRelease>', self.on_title_change)
        self.title_entry.bind('<FocusIn>', self.on_title_focus_in)
        self.title_entry.bind('<FocusOut>', self.on_title_focus_out)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        text_frame = tk.Frame(editor_frame, bg=self.colors['bg_primary'])
        text_frame.pack(fill='both', expand=True)
        
        self.text_area = tk.Text(text_frame,
                                font=('Segoe UI', 13),
                                bg=self.colors['bg_card'],
                                fg=self.colors['text_primary'],
                                insertbackground=self.colors['text_primary'],
                                selectbackground=self.colors['accent'],
                                relief='flat', bd=20,
                                wrap='word',
                                undo=True)
        
        text_scrollbar = ttk.Scrollbar(text_frame, orient="vertical",
                                      command=self.text_area.yview)
        self.text_area.configure(yscrollcommand=text_scrollbar.set)
        
        self.text_area.pack(side="left", fill="both", expand=True)
        text_scrollbar.pack(side="right", fill="y")
        
        self.text_area.bind('<KeyRelease>', self.on_text_change)
        self.text_area.bind('<FocusIn>', self.on_text_focus_in)
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.create_empty_state(editor_frame)
        
    def create_empty_state(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        self.empty_frame = tk.Frame(parent, bg=self.colors['bg_primary'])
        
        # –ë–æ–ª—å—à–∞—è –∏–∫–æ–Ω–∫–∞
        empty_icon = tk.Label(self.empty_frame, text="üìù",
                             font=('Segoe UI', 64),
                             bg=self.colors['bg_primary'],
                             fg=self.colors['text_secondary'])
        empty_icon.pack(pady=(120, 30))
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        welcome_text = tk.Label(self.empty_frame,
                               text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ZametkaAldiyara Pro!",
                               font=('Segoe UI', 20, 'bold'),
                               bg=self.colors['bg_primary'],
                               fg=self.colors['text_primary'])
        welcome_text.pack(pady=(0, 10))
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        instruction_text = tk.Label(self.empty_frame,
                                   text="–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é\n–¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã",
                                   font=('Segoe UI', 14),
                                   bg=self.colors['bg_primary'],
                                   fg=self.colors['text_secondary'],
                                   justify='center')
        instruction_text.pack(pady=(0, 30))
        
        # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        hotkeys_text = tk.Label(self.empty_frame,
                               text="üí° –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:\nCtrl+N - –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞\nCtrl+S - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å\nCtrl+F - –ù–∞–π—Ç–∏",
                               font=('Segoe UI', 11),
                               bg=self.colors['bg_primary'],
                               fg=self.colors['accent'],
                               justify='center')
        hotkeys_text.pack()
        
        self.show_empty_state()
        
    def show_empty_state(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        self.title_entry.master.pack_forget()
        self.text_area.master.pack_forget()
        self.empty_frame.pack(fill='both', expand=True)
        
    def hide_empty_state(self):
        """–°–∫—Ä—ã—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        self.empty_frame.pack_forget()
        self.title_entry.master.pack(fill='x', pady=(0, 20))
        self.text_area.master.pack(fill='both', expand=True)
        
    def setup_hotkeys(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        self.root.bind('<Control-n>', lambda e: self.create_new_note())
        self.root.bind('<Control-s>', lambda e: self.save_notes())
        self.root.bind('<Control-f>', lambda e: self.search_entry.focus_set())
        self.root.bind('<Control-d>', lambda e: self.delete_note())
        self.root.bind('<F5>', lambda e: self.refresh_notes_list())
        
    def change_theme(self, event=None):
        """–°–º–µ–Ω–∞ —Ç–µ–º—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        new_theme = self.theme_var.get()
        if new_theme != self.current_theme:
            self.current_theme = new_theme
            self.colors = self.themes[new_theme]
            self.save_settings()
            self.apply_theme()
            
    def apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã"""
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –Ω–æ–≤–æ–π —Ç–µ–º–æ–π
        self.root.destroy()
        self.__init__()
        
    def on_title_focus_in(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–∫—É—Å–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        if self.title_entry.get() == "–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏...":
            self.title_entry.delete(0, tk.END)
            self.title_entry.configure(fg=self.colors['text_primary'])
            
    def on_title_focus_out(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        if not self.title_entry.get() and not self.current_note:
            self.title_entry.insert(0, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏...")
            self.title_entry.configure(fg=self.colors['text_secondary'])
            
    def on_text_focus_in(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–∫—É—Å–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è"""
        if self.text_area.get(1.0, tk.END).strip() == "–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –∑–¥–µ—Å—å...":
            self.text_area.delete(1.0, tk.END)
            self.text_area.configure(fg=self.colors['text_primary'])
            
    def create_template_note(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ —à–∞–±–ª–æ–Ω—É"""
        templates = [
            {
                'title': '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω',
                'content': '''üìÖ –î–∞—Ç–∞: {date}

üéØ –¶–µ–ª–∏ –Ω–∞ –¥–µ–Ω—å:
‚Ä¢ 
‚Ä¢ 
‚Ä¢ 

üìù –í–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏:
1. 
2. 
3. 

üí≠ –ó–∞–º–µ—Ç–∫–∏:

‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ:
'''.format(date=datetime.now().strftime('%d.%m.%Y'))
            },
            {
                'title': '–ò–¥–µ—è –ø—Ä–æ–µ–∫—Ç–∞',
                'content': '''üí° –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: 

üìã –û–ø–∏—Å–∞–Ω–∏–µ:

üéØ –¶–µ–ª—å:

üõ†Ô∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
‚Ä¢ 
‚Ä¢ 

üìã –ó–∞–¥–∞—á–∏:
1. 
2. 
3. 

üìÖ –î–µ–¥–ª–∞–π–Ω—ã:

üí∞ –ë—é–¥–∂–µ—Ç:

üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏:
'''
            },
            {
                'title': '–ó–∞–º–µ—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á–∏',
                'content': '''ü§ù –í—Å—Ç—Ä–µ—á–∞: 
üìÖ –î–∞—Ç–∞: {date}
üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: 

üìã –ü–æ–≤–µ—Å—Ç–∫–∞ –¥–Ω—è:
1. 
2. 
3. 

üí¨ –û–±—Å—É–∂–¥–µ–Ω–∏–µ:

‚úÖ –†–µ—à–µ–Ω–∏—è:

üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:

üìÖ –°–ª–µ–¥—É—é—â–∞—è –≤—Å—Ç—Ä–µ—á–∞:
'''.format(date=datetime.now().strftime('%d.%m.%Y %H:%M'))
            }
        ]
        
        # –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        template = random.choice(templates)
        
        note = {
            'id': len(self.notes),
            'title': template['title'],
            'content': template['content'],
            'created': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'modified': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
        
        self.notes.insert(0, note)
        self.refresh_notes_list()
        self.select_note(note)
        
    def open_random_note(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏"""
        if self.notes:
            random_note = random.choice(self.notes)
            self.select_note(random_note)
        else:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞!")
            
    def export_note(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–π –∑–∞–º–µ—Ç–∫–∏"""
        if not self.current_note:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
            
        filename = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("Markdown files", "*.md")],
            initialvalue=f"{self.current_note['title']}.txt"
        )
        
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(f"# {self.current_note['title']}\n\n")
                    f.write(f"–°–æ–∑–¥–∞–Ω–æ: {self.current_note['created']}\n")
                    f.write(f"–ò–∑–º–µ–Ω–µ–Ω–æ: {self.current_note['modified']}\n\n")
                    f.write("---\n\n")
                    f.write(self.current_note['content'])
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ó–∞–º–µ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞!")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
                
    def clear_editor(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞"""
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–º–µ—Ç–∫—É?"):
            self.title_entry.delete(0, tk.END)
            self.text_area.delete(1.0, tk.END)
            if self.current_note:
                self.current_note['title'] = ''
                self.current_note['content'] = ''
                self.current_note['modified'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                self.refresh_notes_list()
                
    def update_clock(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Å–æ–≤"""
        current_time = datetime.now().strftime('%H:%M:%S')
        self.clock_label.configure(text=f"üïí {current_time}")
        self.root.after(1000, self.update_clock)
        
    def start_motivational_quotes(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–∫–∞–∑–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç"""
        quotes = [
            "–õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Å–∞–¥–∫–∏ –¥–µ—Ä–µ–≤–∞ –±—ã–ª–æ 20 –ª–µ—Ç –Ω–∞–∑–∞–¥. –í—Ç–æ—Ä–æ–µ –ª—É—á—à–µ–µ –≤—Ä–µ–º—è - —Å–µ–π—á–∞—Å.",
            "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–µ–ª–∞—Ç—å –æ—Ç–ª–∏—á–Ω—É—é —Ä–∞–±–æ—Ç—É - –ª—é–±–∏—Ç—å —Ç–æ, —á—Ç–æ –¥–µ–ª–∞–µ—à—å.",
            "–ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —Ç–æ, —á—Ç–æ –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è.",
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –ª—É—á—à–µ.",
            "–£—Å–ø–µ—Ö - —ç—Ç–æ —Å—É–º–º–∞ –º–∞–ª–µ–Ω—å–∫–∏—Ö —É—Å–∏–ª–∏–π, –ø–æ–≤—Ç–æ—Ä—è–µ–º—ã—Ö –∏–∑–æ –¥–Ω—è –≤ –¥–µ–Ω—å.",
            "–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ - —ç—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –±—É–¥—É—â–µ–µ —Å–µ–±—è.",
            "–ó–∞–ø–∏—Å–∞–Ω–Ω–∞—è –º—ã—Å–ª—å - —ç—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∏–¥–µ—è.",
            "–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ—Å—Ç—å - –∫–ª—é—á –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
        ]
        
        def update_quote():
            quote = random.choice(quotes)
            self.quote_label.configure(text=f'"{quote}"')
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            self.root.after(30000, update_quote)
            
        update_quote()
        
    def button_hover(self, event, enter):
        widget = event.widget
        start_color = self.colors['accent']
        end_color = self.colors['accent_hover'] if enter else self.colors['accent']
        start_rgb = tuple(int(start_color[i:i+2], 16) for i in (1, 3, 5))
        end_rgb = tuple(int(end_color[i:i+2], 16) for i in (1, 3, 5))
        steps = 10
        for step in range(steps):
            r = int(start_rgb[0] + (end_rgb[0] - start_rgb[0]) * step / steps)
            g = int(start_rgb[1] + (end_rgb[1] - start_rgb[1]) * step / steps)
            b = int(start_rgb[2] + (end_rgb[2] - start_rgb[2]) * step / steps)
            color = f"#{r:02x}{g:02x}{b:02x}"
            widget.configure(bg=color)
            self.root.update()
            time.sleep(0.02)

    def tool_button_hover(self, event, enter, btn=None):
        """–≠—Ñ—Ñ–µ–∫—Ç –Ω–∞–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        widget = btn if btn else event.widget
        if enter:
            widget.configure(bg=self.colors['accent'])
        else:
            widget.configure(bg=self.colors['bg_card'])
            
    def on_search_focus_in(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–∫—É—Å–∞ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞"""
        if self.search_entry.get() == "üîç –ù–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫—É...":
            self.search_entry.delete(0, tk.END)
            self.search_entry.configure(fg=self.colors['text_primary'])
            
    def on_search_focus_out(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞"""
        if not self.search_entry.get():
            self.search_entry.insert(0, "üîç –ù–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫—É...")
            self.search_entry.configure(fg=self.colors['text_secondary'])
            
    def create_new_note(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏"""
        note = {
            'id': len(self.notes),
            'title': '–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞',
            'content': '',
            'created': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'modified': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
        
        self.notes.insert(0, note)
        self.refresh_notes_list()
        self.select_note(note)
        self.title_entry.focus_set()
        self.title_entry.select_range(0, tk.END)
        self.update_stats()
        
    def select_note(self, note):
        """–í—ã–±–æ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.current_note = note
        self.hide_empty_state()
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π
        self.title_entry.delete(0, tk.END)
        self.title_entry.insert(0, note['title'])
        self.title_entry.configure(fg=self.colors['text_primary'])
        
        self.text_area.delete(1.0, tk.END)
        self.text_area.insert(1.0, note['content'])
        self.text_area.configure(fg=self.colors['text_primary'])
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self.update_info_label()
        self.refresh_notes_list()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏
        
    def on_title_change(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        if self.current_note:
            new_title = self.title_entry.get()
            if new_title != "–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏...":
                self.current_note['title'] = new_title
                self.current_note['modified'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                self.refresh_notes_list()
                self.update_info_label()
            
    def on_text_change(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
        if self.current_note:
            content = self.text_area.get(1.0, tk.END + '-1c')
            if content != "–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –∑–¥–µ—Å—å...":
                self.current_note['content'] = content
                self.current_note['modified'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                self.update_info_label()
                self.update_stats()
            
    def update_info_label(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –º–µ—Ç–∫–∏"""
        if self.current_note:
            modified = self.current_note['modified']
            content = self.current_note['content']
            word_count = len(content.split()) if content.strip() else 0
            char_count = len(content)
            
            self.info_label.configure(
                text=f" –ò–∑–º–µ–Ω–µ–Ω–æ: {modified.split()[1][:5]} | "
                     f"–°–ª–æ–≤: {word_count} | –°–∏–º–≤–æ–ª–æ–≤: {char_count}"
            )
        else:
            self.info_label.configure(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã")
            
    def update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        total_notes = len(self.notes)
        total_words = sum(len(note['content'].split()) for note in self.notes if note['content'].strip())
        
        self.notes_count_label.configure(text=str(total_notes))
        self.words_count_label.configure(text=str(total_words))
        
    def refresh_notes_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫"""
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
        for widget in self.scrollable_frame.winfo_children():
            widget.destroy()
            
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫
        for note in self.notes:
            self.create_note_card(note)
            
        self.update_stats()
            
    def create_note_card(self, note):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–º–µ—Ç–∫–∏"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –∑–∞–º–µ—Ç–∫–∞
        is_selected = self.current_note and self.current_note['id'] == note['id']
        
        card_bg = self.colors['accent'] if is_selected else self.colors['bg_card']
        text_color = self.colors['text_primary']
        
        card = tk.Frame(self.scrollable_frame,
                       bg=card_bg,
                       cursor='hand2',
                       relief='solid' if is_selected else 'flat',
                       bd=1 if is_selected else 0)
        card.pack(fill='x', pady=3, ipady=12, ipadx=18)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏
        title = note['title'][:35] + "..." if len(note['title']) > 35 else note['title']
        title_label = tk.Label(card, text=f"üìÑ {title}",
                              font=('Segoe UI', 11, 'bold'),
                              bg=card_bg,
                              fg=text_color,
                              anchor='w')
        title_label.pack(fill='x')
        
        # –ü—Ä–µ–≤—å—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        preview = note['content'][:60] + "..." if len(note['content']) > 60 else note['content']
        if preview.strip():
            preview_label = tk.Label(card, text=preview,
                                   font=('Segoe UI', 9),
                                   bg=card_bg,
                                   fg=self.colors['text_secondary'] if not is_selected else text_color,
                                   anchor='w',
                                   wraplength=280)
            preview_label.pack(fill='x', pady=(3, 0))
            
        # –ù–∏–∂–Ω—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_frame = tk.Frame(card, bg=card_bg)
        info_frame.pack(fill='x', pady=(5, 0))
        
        # –î–∞—Ç–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        date_str = note['modified'].split()[1][:5]  # –¢–æ–ª—å–∫–æ –≤—Ä–µ–º—è
        date_label = tk.Label(info_frame, text=f"üïí {date_str}",
                            font=('Segoe UI', 8),
                            bg=card_bg,
                            fg=self.colors['text_secondary'] if not is_selected else text_color,
                            anchor='w')
        date_label.pack(side='left')
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
        word_count = len(note['content'].split()) if note['content'].strip() else 0
        if word_count > 0:
            words_label = tk.Label(info_frame, text=f"üìä {word_count} —Å–ª–æ–≤",
                                 font=('Segoe UI', 8),
                                 bg=card_bg,
                                 fg=self.colors['text_secondary'] if not is_selected else text_color,
                                 anchor='e')
            words_label.pack(side='right')
                
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        def select_this_note(event):
            self.select_note(note)
            
        card.bind('<Button-1>', select_this_note)
        for child in card.winfo_children():
            child.bind('<Button-1>', select_this_note)
            if hasattr(child, 'winfo_children'):
                for grandchild in child.winfo_children():
                    grandchild.bind('<Button-1>', select_this_note)
            
    def search_notes(self, *args):
        """–ü–æ–∏—Å–∫ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º"""
        query = self.search_var.get().lower()
        if query == "üîç –Ω–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫—É..." or not query:
            self.refresh_notes_list()
            return
            
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for widget in self.scrollable_frame.winfo_children():
            widget.destroy()
            
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–º–µ—Ç–æ–∫
        filtered_notes = []
        for note in self.notes:
            if (query in note['title'].lower() or 
                query in note['content'].lower()):
                filtered_notes.append(note)
                
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for note in filtered_notes:
            self.create_note_card(note)
            
        # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if not filtered_notes:
            no_results = tk.Label(self.scrollable_frame,
                                text=f"üîç –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'",
                                font=('Segoe UI', 10),
                                bg=self.colors['bg_secondary'],
                                fg=self.colors['text_secondary'])
            no_results.pack(pady=20)
            
    def delete_note(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∑–∞–º–µ—Ç–∫–∏"""
        if not self.current_note:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
            
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                              f"–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É '{self.current_note['title']}'?"):
            self.notes.remove(self.current_note)
            self.current_note = None
            self.refresh_notes_list()
            self.show_empty_state()
            self.update_stats()
            
    def save_notes(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –≤ —Ñ–∞–π–ª"""
        try:
            filename = filedialog.asksaveasfilename(
                defaultextension=".json",
                filetypes=[("JSON files", "*.json"), ("All files", "*.*")],
                initialvalue="my_notes.json"
            )
            if filename:
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(self.notes, f, ensure_ascii=False, indent=2)
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"‚úÖ –ó–∞–º–µ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}!")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
            
    def load_notes_file(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            filename = filedialog.askopenfilename(
                filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
            )
            if filename:
                with open(filename, 'r', encoding='utf-8') as f:
                    loaded_notes = json.load(f)
                    
                if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                                      "–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏?"):
                    self.notes = loaded_notes
                else:
                    # –î–æ–±–∞–≤–∏—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
                    for note in loaded_notes:
                        note['id'] = len(self.notes)
                        self.notes.append(note)
                        
                self.refresh_notes_list()
                self.show_empty_state()
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"‚úÖ –ó–∞–º–µ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {filename}!")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
            
    def load_notes(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        if os.path.exists('notes_data.json'):
            try:
                with open('notes_data.json', 'r', encoding='utf-8') as f:
                    self.notes = json.load(f)
                self.refresh_notes_list()
            except:
                pass
                
    def auto_save(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
        try:
            with open('notes_data.json', 'w', encoding='utf-8') as f:
                json.dump(self.notes, f, ensure_ascii=False, indent=2)
        except:
            pass
            
    def start_autosave(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        def autosave_worker():
            while True:
                time.sleep(30)  # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                self.auto_save()
                
        thread = threading.Thread(target=autosave_worker, daemon=True)
        thread.start()
        
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            if os.path.exists('app_settings.json'):
                with open('app_settings.json', 'r', encoding='utf-8') as f:
                    return json.load(f)
        except:
            pass
        return {}
        
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            settings = {
                'theme': self.current_theme,
                'window_position': f"{self.root.winfo_x()}+{self.root.winfo_y()}"
            }
            with open('app_settings.json', 'w', encoding='utf-8') as f:
                json.dump(settings, f, ensure_ascii=False, indent=2)
        except:
            pass
        
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            pass
        except:
            pass
            
        self.root.mainloop()
        
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.auto_save()
        self.save_settings()
        self.root.destroy()

if __name__ == "__main__":
    app = ModernNotesApp()
    app.run()